#!/usr/bin/env perl

package jameson;

use 5.016;
use warnings;
use strict;

use FindBin;
use lib "$FindBin::Bin/lib";

use AnyEvent;
use AnyEvent::IRC::Client;

use Module::Pluggable
    instantiate => "new",
    search_path => "jameson::plugin";

my @plugins = __PACKAGE__->plugins;

for my $plugin (@plugins) {
    $plugin->init if $plugin->enabled;
}

if (@ARGV < 4) {
    say "usage: jameson <host> <port> <nick> <channel> [<nickserv pass>]";
    exit 1;
}

my ($HOST, $PORT, $NICK, $CHANNEL, $NSPASS) = @ARGV;

my $c = AnyEvent->condvar;

my $timer;
my $con = new AnyEvent::IRC::Client;

my $joined = 0;

$con->reg_cb(
    registered => sub {
        $con->send_srv(PRIVMSG => "NickServ", "IDENTIFY $NSPASS") if $NSPASS;
        $con->send_srv(JOIN => $CHANNEL);
    },
    disconnect => sub {
        $c->broadcast;
    },
    join => sub {
        return if not pop @_;
        $joined = 1;
    },
    publicmsg => sub {
        return if not $joined;

        my $ircmsg = pop @_;
        my ($channel, $msg) = @{$ircmsg->{params}};
        my (undef, $from) = $con->split_nick_mode($ircmsg->{prefix});
        my ($text) = $msg =~ m/^$NICK\b.?\s*(.*)/i;

        my $direct = 1;
        if (not $text) {
            $text = $msg;
            $direct = 0;
        }

        for my $plugin (@plugins) {
            $plugin->publicmsg($con, $channel, $from, $text, $direct) if $plugin->enabled;
        }
    },
);

$con->connect ($HOST, $PORT, { nick => $NICK });
$c->wait;
$con->disconnect;


package jameson::util;

use AnyEvent::HTTP;

sub shorten {
    state %cache;

    my ($url, $cb) = @_;

    if ($cache{url}) {
        $cb->($cache{url});
    }
    else {
        http_get("http://is.gd/create.php?url=$url&format=simple", sub {
            my ($body, $hdr) = @_;
            if ($hdr->{Status} =~ m/^2/) {
                $cache{$url} = $body;
                $cb->($body);
            }
            else {
                $cb->($url);
            }
        });
    }
}


package jameson::plugin;

sub new {
    my ($class) = @_;

    return bless \do {my $dummy}, $class;
}

sub enabled { 1 }

sub init {}
sub publicmsg {}
