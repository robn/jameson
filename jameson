#!/usr/bin/env perl

package jameson;

use 5.016;
use warnings;
use strict;

use FindBin;
use lib "$FindBin::Bin/lib";

use AnyEvent;
use AnyEvent::Log;
use AnyEvent::IRC::Client;

use Module::Pluggable
    instantiate => "new",
    search_path => "jameson::plugin";

my @plugins = __PACKAGE__->plugins;

for my $plugin (@plugins) {
    $plugin->init if $plugin->enabled;
}

if (@ARGV < 4) {
    say "usage: jameson <host> <port> <nick> <channels> [<nickserv pass>]";
    exit 1;
}

my ($HOST, $PORT, $NICK, $CHANNELS, $NSPASS) = @ARGV;
my @CHANNELS = split ',', $CHANNELS;

AnyEvent::Log::ctx->log_cb(sub { print STDOUT shift; 0 });
my $log = AnyEvent::Log::logger("info");

my $c = AnyEvent->condvar;

my $timer;
my $con = new AnyEvent::IRC::Client;

my %joined;

$con->reg_cb(
    registered => sub {
        $log->("registered");
        if ($NSPASS) {
            $log->("identifying ourselves to NickServ");
            $con->send_srv(PRIVMSG => "NickServ", "IDENTIFY $NSPASS");
        }
        for my $channel (@CHANNELS) {
            $log->("joining $channel");
            $con->send_srv(JOIN => $channel);
        }
    },
    disconnect => sub {
        $log->("disconnected, signalling shutdown");
        $c->broadcast;
    },
    join => sub {
        return if not pop @_;
        my $channel = pop @_;
        $log->("joined $channel");
        $joined{$channel} = 1;
    },
    ctcp_action => sub {
        my (undef, $from, $channel, $msg, $type) = @_;
        return unless $type eq "PRIVMSG";

        return unless $channel =~ m/^#/;
        if (not $joined{$channel}) {
            $log->("got message on $channel, but not joined, ignoring: $msg");
            return;
        }

        for my $plugin (@plugins) {
            $plugin->publicmsg($con, $channel, $from, $msg, 0) if $plugin->enabled;
        }
    },
    publicmsg => sub {
        my $ircmsg = pop @_;
        my ($channel, $msg) = @{$ircmsg->{params}};

        if (not $joined{$channel}) {
            $log->("got message on $channel, but not joined, ignoring: $msg");
            return;
        }

        my (undef, $from) = $con->split_nick_mode($ircmsg->{prefix});
        my ($text) = $msg =~ m/^$NICK\b.?\s*(.*)/i;

        # ignore the github bot
        # XXX this is a dumb way to do it
        return if $from eq "Pioneer";

        my $direct = 1;
        if (not $text) {
            $text = $msg;
            $direct = 0;
        }

        for my $plugin (@plugins) {
            $plugin->publicmsg($con, $channel, $from, $text, $direct) if $plugin->enabled;
        }
    },
);

$log->("connecting to $HOST:$PORT as $NICK");
                                                                                                ;
$con->connect ($HOST, $PORT, { nick => $NICK });

$log->("entering main loop");

$c->wait;

$log->("shutdown triggered");

$con->disconnect;

$log->("exiting");


package jameson::util;

use AnyEvent::HTTP;

sub shorten {
    state %cache;

    my ($url, $cb) = @_;

    if ($cache{url}) {
        $cb->($cache{url});
    }
    else {
        http_get("http://is.gd/create.php?url=$url&format=simple", sub {
            my ($body, $hdr) = @_;
            if ($hdr->{Status} =~ m/^2/) {
                $cache{$url} = $body;
                $cb->($body);
            }
            else {
                $cb->($url);
            }
        });
    }
}


package jameson::plugin;

sub new {
    my ($class) = @_;

    return bless \do {my $dummy}, $class;
}

sub log {
    my ($self, $msg) = @_;
    my ($plugin) = ref($self) =~ m/::([^:]+)$/;
    $log->("$plugin: $msg");
}

sub enabled { 1 }

sub init {}
sub publicmsg {}
